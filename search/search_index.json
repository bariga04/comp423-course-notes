{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Ram's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Tutorial for Setting Up a Dev Container for Go and Making a Program","text":""},{"location":"tutorials/go-setup/#primary-author-ram-ariga","title":"Primary author: Ram Ariga","text":""},{"location":"tutorials/go-setup/#reviewer-james-masterson","title":"Reviewer: James Masterson","text":"<p>Hello Readers! The following tutorial is a guide to create a simple project in the programming language Go.  </p> <p>Follow the steps as listed and you'll be on your way to making a Go program in no time!  </p>"},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites:","text":"<ul> <li>Programming experience   </li> <li>Git installed: can install it here </li> <li>Have VSCode installed </li> <li>A command terminal  </li> <li>A GitHub account  </li> <li>Docker installed </li> </ul>"},{"location":"tutorials/go-setup/#step-1-setting-up-your-project","title":"Step 1. Setting up your project","text":"<ul> <li>Open your command terminal and <code>cd</code> to your home directory. Then make a new directory and cd into it.  </li> </ul> <p>Note</p> <p>This should be your project root folder  </p> <pre><code>cd  \nmkdir &lt;directory name&gt;  \ncd &lt;directory name&gt;  \n</code></pre>"},{"location":"tutorials/go-setup/#setup-github","title":"Setup GitHub:","text":"<ul> <li>Create a git repository with this command:</li> </ul> <pre><code>git init  \n</code></pre> <ul> <li>Then create a GitHub repository on the GitHub website by going to the repositories page and clicking the \"new\" button.<ul> <li>Make sure to NOT initialize with a .gitignore or license or <code>README.md</code> </li> </ul> </li> <li>Make sure to then link your local git repository to the remote repository in your GitHub acccount with this subcommand:  </li> </ul> <pre><code>git remote add origin &lt;link to repository&gt;.git  \n</code></pre>"},{"location":"tutorials/go-setup/#step-2-create-your-dev-container","title":"Step 2. Create your dev container","text":"<ul> <li>Install the Dev Containers extension on VSCode  </li> <li>Open up your project folder in VSCode  </li> <li>Create a new directory called <code>.devcontainer</code> and a file inside of it called <code>devcontainer.json</code> </li> <li>The <code>devcontainer.json</code> file will contain configurations for the container. In this case we will have a image and extensions that correlate with the Go programming language. This file will also install the Go extension in VSCode.</li> <li>The <code>devcontainer.json</code> file should look something like this:  </li> </ul> <pre><code>{\n  \"name\": \"&lt;Project Name&gt;\",  \n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",  \n  \"customizations\": {  \n    \"vscode\": {  \n      \"settings\": {},  \n      \"extensions\": [\"golang.go\"]  \n    }  \n  },  \n  \"postCreateCommand\": \"go mod tidy\"  \n}  \n</code></pre> <p>Warning</p> <p>After you finish your <code>devontainer.json</code> file make sure to save it.  </p> <ul> <li>Then reopen the project in the container. VSCode should prompt you to do this but if not use <code>Ctrl+Shift+P</code> then type \"Dev Containers: Reopen in Container\" in the search bar then select the option it shows.  </li> </ul>"},{"location":"tutorials/go-setup/#step-3-creating-a-go-hello-comp423-program","title":"Step 3. Creating a Go \"Hello Comp423\" program","text":"<ul> <li>Before starting the next step, make sure you have an up to date version of Go installed using the <code>go version</code> subcommand   </li> <li>Open up a new terminal in VSCode. You will be using this terminal from now on.  </li> <li>First use the <code>go mod</code> subcommand to create a go module. Name it the same name as your project if you'd like for convenience.    </li> </ul> <pre><code>go mod init &lt;module name&gt;  \n</code></pre> <ul> <li>In your project root folder create a new .go file. You can name it anything you want, for example: <code>hello423.go</code> </li> </ul> <p>!!!  note     Your file should contain the following:  </p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello COMP423\")\n}  \n</code></pre>"},{"location":"tutorials/go-setup/#step-4-run-your-program","title":"Step 4. Run your program!","text":"<ul> <li>Now that you have your .go file, you can run your program using the <code>run</code> subcommand! </li> </ul> <p>Note</p> <p>Type the following in your VSCode terminal:  </p> <pre><code>go run .  \n</code></pre> <ul> <li>If you did everything correctly you should see <code>Hello COMP423</code> displayed in the terminal.  </li> </ul>"},{"location":"tutorials/go-setup/#using-build-subcommand","title":"Using build subcommand:","text":"<ul> <li>An alternative way to run the program is to use the <code>go build</code> subcommand. Unlike <code>go run</code>, the build subcommand creates a binary executable file that you can run directly by typing <code>./&lt;executable name&gt;</code> in the terminal. This is similar to the <code>gcc</code> command in Comp 211, where you first compile a <code>.c</code> program into an <code>.o</code> file then into an exectuable file that can be run.  </li> <li> <p>This differs from the <code>go run</code> subcommand as the <code>run</code> subcommand compiles and runs the program in one step with no exectuable file saved in the project folder.  </p> </li> <li> <p>The following terminal commands detail the process. In this case the <code>.go</code> file is called <code>hello423.go</code> </p> </li> </ul> <pre><code>go build hello423.go  \n./hello423  \n</code></pre> <p>Note</p> <p>This should also print <code>Hello COMP423</code> </p>"},{"location":"tutorials/go-setup/#clean-up-dependencies","title":"Clean up dependencies:","text":"<p>Warning</p> <p>Use the <code>go mod tidy</code> subcommand to clean up any uneeded dependencies after running your program.  </p> <p>Congrats on making it to the end! You're officially a Go programmer!</p>"}]}